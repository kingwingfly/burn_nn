name: Release

permissions:
  contents: write

on:
  push:
    tags:
      - v[0-9]+.*

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: taiki-e/create-gh-release-action@v1
        with:
          # (optional) Path to changelog.
          changelog: CHANGELOG.md
          # (required) GitHub token for creating GitHub Releases.
          token: ${{ secrets.GITHUB_TOKEN }}

  upload-assets:
    needs: create-release
    strategy:
      matrix:
        include:
          - os: "macos-latest" # for Arm based macs (M1 and above).
            target: "aarch64-apple-darwin"
          - os: "macos-latest" # for Intel based macs.
            target: "x86_64-apple-darwin"
          - os: "ubuntu-22.04"
            target: x86_64-unknown-linux-gnu
          - os: "windows-latest"
            target: x86_64-pc-windows-msvc

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - name: setup cuda
        if: ${{ matrix.os == 'ubuntu-22.04' || matrix.os == 'windows-latest' }}
        uses: Jimver/cuda-toolkit@master
        with:
          method: network
          sub-packages: '["nvcc"]'
      - name: Cache restore
        if: ${{ matrix.os == 'ubuntu-22.04' || matrix.os == 'windows-latest' }}
        uses: actions/cache/restore@v4
        id: pytorch-lib-restore
        with:
          path: |
            libtorch.zip
          key: pytorch-lib
      - name: download pytorch-lib
        if: steps.pytorch-lib-restore.outputs.cache-hit != 'true' && ${{ matrix.os == 'ubuntu-22.04' || matrix.os == 'windows-latest' }}
        run: |
          wget -O libtorch.zip https://download.pytorch.org/libtorch/cu121/libtorch-cxx11-abi-shared-with-deps-2.2.0%2Bcu121.zip
      - name: Cache save
        if: steps.pytorch-lib-restore.outputs.cache-hit != 'true' && ${{ matrix.os == 'ubuntu-22.04' || matrix.os == 'windows-latest' }}
        uses: actions/cache/save@v4
        id: cache-cargo-save
        with:
          path: |
            libtorch.zip
          key: ${{ steps.pytorch-lib-restore.outputs.cache-primary-key }}
      - name: unzip pytorch-lib
        if: ${{ matrix.os == 'ubuntu-22.04' || matrix.os == 'windows-latest' }}
        run: |
          unzip libtorch.zip
      - name: setup environment
        if: ${{ matrix.os == 'ubuntu-22.04' || matrix.os == 'windows-latest' }}
        run: |
          export PATH="${{steps.cuda-toolkit.outputs.CUDA_PATH}}/bin:$PATH"
          export LD_LIBRARY_PATH="$(pwd)/libtorch/lib:$LD_LIBRARY_PATH" LIBTORCH="$(pwd)/libtorch"
      - name: setup environment macOS
        if: ${{ matrix.os == 'macos-latest' }}
        run: |
          python3 -m venv pytorch
          source pytorch/bin/activate
          pip install torch==2.2.0 numpy==1.26.4 setuptools
          export LIBTORCH_USE_PYTORCH=1
          export DYLD_LIBRARY_PATH="$(find pytorch -type d -name "lib" | grep /torch):$DYLD_LIBRARY_PATH"
      - uses: taiki-e/upload-rust-binary-action@v1
        with:
          # (required) Comma-separated list of binary names (non-extension portion of filename) to build and upload.
          # Note that glob pattern is not supported yet.
          bin: model,score
          # (optional) Target triple, default is host triple.
          # This is optional but it is recommended that this always be set to
          # clarify which target you are building for if macOS is included in
          # the matrix because GitHub Actions changed the default architecture
          # of macos-latest since macos-14.
          target: ${{ matrix.target }}
          # (optional) Comma-separated list of additional files to be included to archive.
          # Note that glob pattern is not supported yet.
          include: dist/train.sh,README.md
          # (optional) Whether to create the leading directory in the archive or not. default to false.
          leading-dir: true
          # (optional) Archive name (non-extension portion of filename) to be uploaded.
          # [default value: $bin-$target]
          # [possible values: the following variables and any string]
          #   variables:
          #     - $bin    - Binary name (non-extension portion of filename).
          #     - $target - Target triple.
          #     - $tag    - Tag of this release.
          # When multiple binary names are specified, default archive name or $bin variable cannot be used.
          archive: burn_xp-$tag-$target
          # (optional) On which platform to distribute the `.tar.gz` file.
          # [default value: unix]
          # [possible values: all, unix, windows, none]
          tar: unix
          # (optional) On which platform to distribute the `.zip` file.
          # [default value: windows]
          # [possible values: all, unix, windows, none]
          zip: windows
          # (required) GitHub token for uploading assets to GitHub Releases.
          token: ${{ secrets.GITHUB_TOKEN }}
